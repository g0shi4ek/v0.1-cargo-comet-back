// protos/comet_orbit.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: proto/comet_orbit.proto

package cometorbit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrbitService_CalculateKeplerianElements_FullMethodName = "/cometorbit.OrbitService/CalculateKeplerianElements"
	OrbitService_GetClosestApproach_FullMethodName         = "/cometorbit.OrbitService/GetClosestApproach"
	OrbitService_GetTrajectory_FullMethodName              = "/cometorbit.OrbitService/GetTrajectory"
)

// OrbitServiceClient is the client API for OrbitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для вычисления параметров орбиты кометы
type OrbitServiceClient interface {
	// Вычисляет 6 кеплеровских элементов орбиты по набору наблюдений
	CalculateKeplerianElements(ctx context.Context, in *ObservationsRequest, opts ...grpc.CallOption) (*KeplerianElementsResponse, error)
	// Вычисляет дату и дистанцию максимального сближения с Землей
	GetClosestApproach(ctx context.Context, in *ObservationsRequest, opts ...grpc.CallOption) (*ClosestApproachResponse, error)
	// Возвращает траекторию (эфемериды) для визуализации
	GetTrajectory(ctx context.Context, in *TrajectoryRequest, opts ...grpc.CallOption) (*TrajectoryResponse, error)
}

type orbitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrbitServiceClient(cc grpc.ClientConnInterface) OrbitServiceClient {
	return &orbitServiceClient{cc}
}

func (c *orbitServiceClient) CalculateKeplerianElements(ctx context.Context, in *ObservationsRequest, opts ...grpc.CallOption) (*KeplerianElementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeplerianElementsResponse)
	err := c.cc.Invoke(ctx, OrbitService_CalculateKeplerianElements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orbitServiceClient) GetClosestApproach(ctx context.Context, in *ObservationsRequest, opts ...grpc.CallOption) (*ClosestApproachResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClosestApproachResponse)
	err := c.cc.Invoke(ctx, OrbitService_GetClosestApproach_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orbitServiceClient) GetTrajectory(ctx context.Context, in *TrajectoryRequest, opts ...grpc.CallOption) (*TrajectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrajectoryResponse)
	err := c.cc.Invoke(ctx, OrbitService_GetTrajectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrbitServiceServer is the server API for OrbitService service.
// All implementations must embed UnimplementedOrbitServiceServer
// for forward compatibility.
//
// Сервис для вычисления параметров орбиты кометы
type OrbitServiceServer interface {
	// Вычисляет 6 кеплеровских элементов орбиты по набору наблюдений
	CalculateKeplerianElements(context.Context, *ObservationsRequest) (*KeplerianElementsResponse, error)
	// Вычисляет дату и дистанцию максимального сближения с Землей
	GetClosestApproach(context.Context, *ObservationsRequest) (*ClosestApproachResponse, error)
	// Возвращает траекторию (эфемериды) для визуализации
	GetTrajectory(context.Context, *TrajectoryRequest) (*TrajectoryResponse, error)
	mustEmbedUnimplementedOrbitServiceServer()
}

// UnimplementedOrbitServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrbitServiceServer struct{}

func (UnimplementedOrbitServiceServer) CalculateKeplerianElements(context.Context, *ObservationsRequest) (*KeplerianElementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateKeplerianElements not implemented")
}
func (UnimplementedOrbitServiceServer) GetClosestApproach(context.Context, *ObservationsRequest) (*ClosestApproachResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClosestApproach not implemented")
}
func (UnimplementedOrbitServiceServer) GetTrajectory(context.Context, *TrajectoryRequest) (*TrajectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrajectory not implemented")
}
func (UnimplementedOrbitServiceServer) mustEmbedUnimplementedOrbitServiceServer() {}
func (UnimplementedOrbitServiceServer) testEmbeddedByValue()                      {}

// UnsafeOrbitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrbitServiceServer will
// result in compilation errors.
type UnsafeOrbitServiceServer interface {
	mustEmbedUnimplementedOrbitServiceServer()
}

func RegisterOrbitServiceServer(s grpc.ServiceRegistrar, srv OrbitServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrbitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrbitService_ServiceDesc, srv)
}

func _OrbitService_CalculateKeplerianElements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrbitServiceServer).CalculateKeplerianElements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrbitService_CalculateKeplerianElements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrbitServiceServer).CalculateKeplerianElements(ctx, req.(*ObservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrbitService_GetClosestApproach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrbitServiceServer).GetClosestApproach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrbitService_GetClosestApproach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrbitServiceServer).GetClosestApproach(ctx, req.(*ObservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrbitService_GetTrajectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrajectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrbitServiceServer).GetTrajectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrbitService_GetTrajectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrbitServiceServer).GetTrajectory(ctx, req.(*TrajectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrbitService_ServiceDesc is the grpc.ServiceDesc for OrbitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrbitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cometorbit.OrbitService",
	HandlerType: (*OrbitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateKeplerianElements",
			Handler:    _OrbitService_CalculateKeplerianElements_Handler,
		},
		{
			MethodName: "GetClosestApproach",
			Handler:    _OrbitService_GetClosestApproach_Handler,
		},
		{
			MethodName: "GetTrajectory",
			Handler:    _OrbitService_GetTrajectory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/comet_orbit.proto",
}
